#!/usr/bin/python
# -*- coding: utf-8 -*-

# Copyright 2013, Tomas Edwardsson 
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


from subprocess import Popen, PIPE
import sys
from pynag.Plugins import PluginHelper

def main():
    p = PluginHelper()

    # Warn on inactive
    level = 2

    service_status = get_service_status(sys.argv[1])

    if loaded(service_status)[0] is False:
	p.exit(3, 
               "%s - %s" % ( service_status['name'], 
               loaded(service_status)[1]),
               "\n" + service_status['unparsed'])

    active = service_status['headers']['Active'][0]
    if active.startswith("inactive") or active.startswith('failed'):
        p.add_status(level)
    elif active.startswith("active"):
        p.add_status(0)
    else:
        p.add_status(3)

    p.add_summary("%s - %s" % ( service_status['name'], active))
    p.add_long_output("\n" + service_status['unparsed'])
    p.exit()
               
    
        

def loaded(stat):
    if stat['headers']['Loaded']:
	if stat['headers']['Loaded'][0].startswith("error"):
	    return (False, stat['headers']['Loaded'][0])
    return (True, stat['headers']['Loaded'][0])

	    

def get_service_status(service):
    bullet = u'‚óè'
    
    stdout = Popen(["systemctl", "status", service], stdout=PIPE).communicate()[0]
    stdout = stdout.decode('utf-8')
    stdout_lines = stdout.split("\n")
    nameline = stdout_lines.pop(0).split()
    
    if nameline[0] == bullet:
        name = nameline[1]
    else:
        name = nameline[0]

    headers = {}

    while len(stdout_lines):
	l = stdout_lines.pop(0).strip()

	if l == "":
	    break
        
        try:
	    k, v = l.split(': ', 1)
	except ValueError:
	    continue # Some headers can have multiple lines. Skip them.
	
	if k in headers:
	    headers[k].append(v)
	else:
	    headers[k] = [v]

    return { "name": name, "headers": headers, "journal": stdout_lines, "unparsed": stdout }

if __name__ == "__main__":
    main()


# vim: sts=4 expandtab
